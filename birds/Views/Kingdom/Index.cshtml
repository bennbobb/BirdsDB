@model PaginatedList<birds.Models.TaxKingdom>

@{ ViewData["Title"] = "Index"; }

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by Kingdom <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>
<span>@Html.DisplayFor(model => model.TotalResults) results</span>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["KingdomSortParm"]"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]">
                    @Html.DisplayNameFor(model => model.FirstOrDefault().TaxKingdomName)
                </a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DomainSortParm"]"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]">
                    @Html.DisplayNameFor(model => model.FirstOrDefault().TaxDomain.TaxDomainName)
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
<tr>
    <td>
        <a asp-controller="Phylum" asp-action="Index" asp-route-id="@item.TaxKingdomID">
            @Html.DisplayFor(modelItem => item.TaxKingdomName)
        </a>
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.TaxDomain.TaxDomainName)
    </td>
    <td>
        <a asp-action="Edit" asp-route-id="@item.TaxKingdomID">Edit</a> |
        <a asp-action="Details" asp-route-id="@item.TaxKingdomID">Details</a> |
        <a asp-action="Delete" asp-route-id="@item.TaxKingdomID">Delete</a>
    </td>
</tr>
}
    </tbody>
</table>

@{ var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : ""; }

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>